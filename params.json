{"name":"Entity-manager","tagline":"","body":"# Entity Manager Documentation\r\nIn order to provide lookup, discovery and resolution services for physical and virtual entities ebbits offers the entity management functionalities via Entity Manager component. Beside the core functionality – i.e. to provide world-wide unique identifiers, Entity Manager also supports:\r\n* mapping to local identifiers that are used by different stakeholders, but identifies the same entity and \r\n* management of part-of relation between two entities – i.e. an entity could have one or more parts (slave entities) and at the same time it could be part of one or more entities (master). In order to be able traverse such relationships, the resolution part of the Entity Management service maintains an oriented acyclic graph structure.\r\n\r\nThe Entity Manager is implemented as a RESTful web service with the Ruby on Rails  framework and is deployed at Heroku  cloud application platform. At the [http://entity-manager.herokuapp.com/entities](http://entity-manager.herokuapp.com/entities) URL, there is also available a simple administration console. Authorisation system is simplified in a way that authenticated users via third-party authentication (Google, Linked-In) or just registered developers are able to access the system functionality. Not authenticated users can just view current contents of the Entity Manager. \r\n\r\n## Entity Manager supports the following API:\r\n\r\n## `createIdentity( LocalID, Credentials): Entity`\r\nBased on local identifier, credentials identifying an owner (i.e. stakeholder in an IoT application) and entity’s description, the call creates new entity with world-wide unique identifier that is randomly generated.\r\n\r\n### `Parameters`\r\n_localID_  The local identifier of an entity.\r\n\r\n_description_ Basic textual description of registered entity.\r\n\r\n_credentials_ Data necessary for identification and authorisation of authority that is registering a new entity.\r\n\r\n### `Returns`\r\nThe function returns XML serialization of the successfully registered entity data element or error message in case of failure.\r\n\r\n### `Example of the request and result`\r\n```\r\ncurl -d \"localid=sensor1ab&owner=3&description=Some nice description.\" http://localhost:3000/entities.xml\r\n\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<entity>\r\n  <id type=\"integer\">15</id>\r\n  <uuid>e90dd88b-67bc-44a9-9eb9-22bbbef16d0d</uuid>\r\n  <description>Some nice description.</description>\r\n  <created-at type=\"datetime\">2013-03-23T07:49:38Z</created-at>\r\n  <updated-at type=\"datetime\">2013-03-23T07:49:38Z</updated-at>\r\n  <schema>urn:entityID:</schema>\r\n</entity>\r\n```\r\n\r\n## `addAliasToIdentity(EbbitsID, LocalID, Credentials):Boolean`\r\nAdds alias to an existing entity (restful operation using the entity ID given in DB).\r\n\r\n### `Parameters`\r\n_Entity_UUID_  The unique identifier of the entity, to which an alias is being added.\r\n\r\n_localID_ The local identifier of an entity.\r\n\r\n_name_ The local name of an entity.\r\n\r\n_description_ Basic textual description of registered alias.\r\n\r\n_credentials_ Data necessary for identification and authorization of authority that is registering a new alias for an entity.\r\n\r\n### `Returns`\r\nThe function returns XML serialization of the successfully registered alias data element or error message in case of failure.\r\n\r\n### `Example of the request and result`\r\n```\r\ncurl -d \"owner=3&localid=1abc&name=temperature1abc&description=temperature sesor in the kitchen\" http://localhost:3000/entities/12/local_identities.xml\r\n\r\n\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<local-identity>\r\n  <id type=\"integer\">80</id>\r\n  <localid>1abc</localid>\r\n  <name>temperature1abc</name>\r\n  <owner-id type=\"integer\">3</owner-id>\r\n  <description>temperature sesor in the kitchen</description>\r\n  <entity-id type=\"integer\">12</entity-id>\r\n  <created-at type=\"datetime\">2013-03-23T14:29:49Z</created-at>\r\n  <updated-at type=\"datetime\">2013-03-23T14:29:49Z</updated-at>\r\n</local-identity>\r\n\r\nor \r\n\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<hash>\r\n  <error>Local ID for selected entity already exists.</error>\r\n</hash>\r\n\r\nor\r\n\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<hash>\r\n  <error>Entity not found - can not create local alias.</error>\r\n</hash>\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}